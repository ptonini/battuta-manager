# Generated by Django 2.1 on 2018-11-25 13:57

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import main.extras.mixins


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='LocalUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('timezone', models.CharField(max_length=64)),
            ],
            options={
                'verbose_name': 'user',
                'abstract': False,
                'verbose_name_plural': 'users',
            },
            bases=(models.Model, main.extras.mixins.RESTfulModelMixin),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Credential',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=32)),
                ('is_shared', models.BooleanField(default=False)),
                ('username', models.CharField(max_length=32)),
                ('password', models.CharField(blank=True, max_length=64)),
                ('rsa_key', models.TextField(blank=True, max_length=2048)),
                ('sudo_user', models.CharField(blank=True, max_length=32)),
                ('sudo_pass', models.CharField(blank=True, max_length=64)),
                ('ask_pass', models.BooleanField(default=True)),
                ('ask_sudo_pass', models.BooleanField(default=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            bases=(models.Model, main.extras.mixins.RESTfulModelMixin),
        ),
        migrations.CreateModel(
            name='LocalGroup',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'permissions': (('edit_groups', 'Can create and edit groups'), ('edit_hosts', 'Can create and edit hosts'), ('edit_playbooks', 'Can edit playbooks'), ('edit_tasks', 'Can edit tasks'), ('edit_roles', 'Can edit roles'), ('execute_jobs', 'Can execute jobs'), ('view_job_history', 'Can view job history'), ('edit_files', 'Can create and edit files'), ('edit_users', 'Can create and edit users'), ('edit_user_groups', 'Can create and edit user groups'), ('edit_user_files', 'Can create and edit user files'), ('edit_permissions', 'Can edit user group permissions'), ('edit_preferences', 'Can edit preferences'), ('edit_projects', 'Can edit projects')),
            },
            bases=('auth.group', main.extras.mixins.RESTfulModelMixin),
            managers=[
                ('objects', django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.AddField(
            model_name='localuser',
            name='default_cred',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='iam.Credential'),
        ),
        migrations.AddField(
            model_name='localuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='localuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AlterUniqueTogether(
            name='credential',
            unique_together={('user', 'title')},
        ),
    ]
